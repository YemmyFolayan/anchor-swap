[{"/Users/jibola/Documents/projects/swap/app/src/index.tsx":"1","/Users/jibola/Documents/projects/swap/app/src/reportWebVitals.ts":"2","/Users/jibola/Documents/projects/swap/app/src/App.tsx":"3","/Users/jibola/Documents/projects/swap/app/src/idl.ts":"4"},{"size":554,"mtime":1665839782303,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1665839782304,"results":"7","hashOfConfig":"6"},{"size":6304,"mtime":1666015982480,"results":"8","hashOfConfig":"6"},{"size":2741,"mtime":1665960875868,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v990bx",{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jibola/Documents/projects/swap/app/src/index.tsx",[],"/Users/jibola/Documents/projects/swap/app/src/reportWebVitals.ts",[],"/Users/jibola/Documents/projects/swap/app/src/App.tsx",["19"],"import \"./App.css\";\nimport {\n  Connection,\n  PublicKey,\n  clusterApiUrl,\n  ConfirmOptions,\n} from \"@solana/web3.js\";\nimport { Program, AnchorProvider, BN } from \"@project-serum/anchor\";\nimport idl from \"./idl.json\";\n\nimport { PhantomWalletAdapter } from \"@solana/wallet-adapter-phantom\";\nimport {\n  useWallet,\n  AnchorWallet,\n  WalletProvider,\n  ConnectionProvider,\n} from \"@solana/wallet-adapter-react\";\nimport {\n  WalletModalProvider,\n  WalletMultiButton,\n} from \"@solana/wallet-adapter-react-ui\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport { IDL, Swap } from \"./idl\";\nimport { SolendMarket } from \"@solendprotocol/solend-sdk\";\nrequire(\"@solana/wallet-adapter-react-ui/styles.css\");\n\nconst wallets = [\n  /* view list of available wallets at https://github.com/solana-labs/wallet-adapter#wallets */\n  new PhantomWalletAdapter(),\n];\nconst network = clusterApiUrl(WalletAdapterNetwork.Devnet);\n\n/* create an account  */\nconst opts = {\n  preflightCommitment: \"processed\",\n} as ConfirmOptions;\nconst programID = new PublicKey(idl.metadata.address);\n\nfunction App() {\n  const { connected, signTransaction, signAllTransactions, publicKey } =\n    useWallet();\n  const anchorWallet = {\n    signTransaction,\n    signAllTransactions,\n    publicKey,\n  } as AnchorWallet;\n\n  const connection = new Connection(\n    network,\n    opts.preflightCommitment as \"processed\"\n  );\n  async function getProvider() {\n    /* create the provider and return it to the caller */\n    /* network set to local network for now */\n    const provider = new AnchorProvider(connection, anchorWallet, opts);\n    return provider;\n  }\n\n  async function makeSwap() {\n    const provider = await getProvider();\n    /* create the program interface combining the idl, program ID, and provider */\n    const program = new Program<Swap>(IDL, programID, provider);\n    try {\n      /* interact with the program via rpc */\n      console.log(\n        \"provider.wallet.publicKey: \",\n        anchorWallet.publicKey?.toBase58()\n      );\n      const swapTransaction = program.transaction.makeSwap(\n        new BN(0),\n        new BN(0),\n        {\n          accounts: {\n            jupiterProgram: new PublicKey(\n              \"JUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph\"\n            ),\n            // Mecurial swap program\n            swapProgram: new PublicKey(\n              \"MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky\"\n            ),\n            // Mercurial PAI 3-Pool (USDC-USDT-PAI)\n            swapState: new PublicKey(\n              \"SWABtvDnJwWwAb9CbSA3nv7nTnrtYjrACAVtuP3gyBB\"\n            ),\n            // PAI 3-pool authority\n            poolAuthority: new PublicKey(\n              \"2dc3UgMuVkASzW4sABDjDB5PjFbPTncyECUnZL73bmQR\"\n            ),\n            // USDC token\n            sourceToken: new PublicKey(\n              \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n            ),\n            // PAI token\n            destinationToken: new PublicKey(\n              \"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\"\n            ),\n            tokenProgram: new PublicKey(\n              \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n            ),\n            // my account\n            authority: anchorWallet!.publicKey,\n          },\n        }\n      );\n      const res = await provider.sendAndConfirm(swapTransaction);\n      // const res = await anchorWallet!.signTransaction!(swapTransaction);\n\n      console.log(\"account: \", res);\n    } catch (err) {\n      console.log(\"Transaction error: \", err);\n    }\n  }\n  async function flashLoan() {\n    const provider = await getProvider();\n    const market = await SolendMarket.initialize(\n      connection,\n      \"devnet\",\n      \"AAGH44cPMYSq51JZ1rth2AzBqSVass8bxwFxtEQy2L9x\"\n    );\n    /* create the program interface combining the idl, program ID, and provider */\n    const program = new Program<Swap>(IDL, programID, provider);\n    try {\n      /* interact with the program via rpc */\n      console.log(\n        \"provider.wallet.publicKey: \",\n        anchorWallet.publicKey?.toBase58()\n      );\n      const swapTransaction = program.transaction.makeSwap(\n        new BN(0),\n        new BN(0),\n        {\n          accounts: {\n            jupiterProgram: new PublicKey(\n              \"JUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph\"\n            ),\n            // Mecurial swap program\n            swapProgram: new PublicKey(\n              \"MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky\"\n            ),\n            // Mercurial PAI 3-Pool (USDC-USDT-PAI)\n            swapState: new PublicKey(\n              \"SWABtvDnJwWwAb9CbSA3nv7nTnrtYjrACAVtuP3gyBB\"\n            ),\n            // PAI 3-pool authority\n            poolAuthority: new PublicKey(\n              \"2dc3UgMuVkASzW4sABDjDB5PjFbPTncyECUnZL73bmQR\"\n            ),\n            // USDC token\n            sourceToken: new PublicKey(\n              \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\"\n            ),\n            // PAI token\n            destinationToken: new PublicKey(\n              \"Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS\"\n            ),\n            tokenProgram: new PublicKey(\n              \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\"\n            ),\n            // my account\n            authority: anchorWallet!.publicKey,\n          },\n        }\n      );\n      const res = await provider.sendAndConfirm(swapTransaction);\n      // const res = await anchorWallet!.signTransaction!(swapTransaction);\n\n      console.log(\"account: \", res);\n    } catch (err) {\n      console.log(\"Transaction error: \", err);\n    }\n  }\n\n  if (!connected) {\n    /* If the user's wallet is not connected, display connect wallet button. */\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginTop: \"100px\",\n        }}\n      >\n        <WalletMultiButton />\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        {<button onClick={makeSwap}>Swap Or Something</button>}\n        {<button onClick={flashLoan}>Flash Loan</button>}\n      </div>\n    );\n  }\n}\n\nconst AppWithProvider = () => (\n  <ConnectionProvider endpoint={network}>\n    <WalletProvider wallets={wallets} autoConnect>\n      <WalletModalProvider>\n        <App />\n      </WalletModalProvider>\n    </WalletProvider>\n  </ConnectionProvider>\n);\n\nexport default AppWithProvider;\n","/Users/jibola/Documents/projects/swap/app/src/idl.ts",[],{"ruleId":"20","severity":1,"message":"21","line":115,"column":11,"nodeType":"22","messageId":"23","endLine":115,"endColumn":17},"@typescript-eslint/no-unused-vars","'market' is assigned a value but never used.","Identifier","unusedVar"]